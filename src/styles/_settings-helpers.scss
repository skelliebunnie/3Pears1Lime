/* ====================================
		HELPERS
		1. bg, border, text colors
 * ==================================== */
$colorNames: map-keys($palette);
$colors: map-values($palette);

@for $n from 1 through length($colorNames) {
	$name: nth($colorNames, $n);
	$val: nth($colors, $n);
	.bg-#{$name} {
		background-color: $val;
		color: getContrast($val);
		a {
			color: getContrast($val);
		}
	}

	.bg-hover-#{$name}:hover {
		background-color: $val;
		color: getContrast($val);
		a {
			color: getContrast($val);
		}
	}

	.border-#{$name} { border: 2px solid $val; }

	.border-top-#{$name} { border-top: 2px solid $val; }
	.border-right-#{$name} { border-right: 2px solid $val; }
	.border-bottom-#{$name} { border-bottom: 2px solid $val; }
	.border-left-#{$name} { border-left: 2px solid $val; }
	.border-x-#{$name} { 
		border-left: 2px solid $val; 
		border-right: 2px solid $val; 
	}
	.border-y-#{$name} { 
		border-top: 2px solid $val;
		border-bottom: 2px solid $val;
	}

	.border-sm { border-width: 1px; }
	.border-md { border-width: 3px; }
	.border-lg { border-width: 5px; }

	.text-#{$name} { color: $val; }
	.text-hover-#{$name}:hover { color: $val; }

	.box-shadow-#{$name}-xs { box-shadow: 1px 1px 2px -1px $val; }
	.box-shadow-#{$name}-sm { box-shadow: 1px 1px 1px $val; }
	.box-shadow-#{$name}-md { box-shadow: 2px 2px 3px $val; }
	.box-shadow-#{$name}-lg { box-shadow: 3px 3px 5px $val; }
	.box-shadow-#{$name}-xl { box-shadow: 4px 4px 7px $val; }

	.text-shadow-#{$name}-xs { text-shadow: 1px 1px 2px -1px $val; }
	.text-shadow-#{$name}-sm { text-shadow: 1px 1px 1px $val; }
	.text-shadow-#{$name}-md { text-shadow: 2px 2px 3px $val; }
	.text-shadow-#{$name}-lg { text-shadow: 3px 3px 5px $val; }
	.text-shadow-#{$name}-xl { text-shadow: 4px 4px 7px $val; }
}

.bg {
	&-dark {
		background-color: getVal('color-dark', $defaults);
		color: getContrast(getVal('color-dark', $defaults));
		a { color: getContrast(getVal('color-dark', $defaults)); }
	}

	&-hover-dark:hover {
		background-color: getVal('color-dark', $defaults);
		color: getContrast(getVal('color-dark', $defaults));
		a { color: getContrast(getVal('color-dark', $defaults)); }
	}
	
	&-light {
		background-color: getVal('color-light', $defaults);
		color: getContrast(getVal('color-light', $defaults));
		a { color: getContrast(getVal('color-light', $defaults)); }
	}

	&-hover-light:hover {
		background-color: getVal('color-light', $defaults);
		color: getContrast(getVal('color-light', $defaults));
		a { color: getContrast(getVal('color-light', $defaults)); }
	}

	&-inherit,
	&-inherit:hover {
		background-color: inherit;
	}

	&-transparent,
	&-transparent:hover {
		background-color: transparent;
	}
}

.border {
	&-dark { border-color: getVal('color-dark', $defaults); }
	&-light { border-color: getVal('color-light', $defaults); }
	&-inherit { border-color: inherit; }
	&-transparent { border-color: transparent; }
}

.text {
	&-dark { color: getVal('color-dark', $defaults); }
	&-light { color: getVal('color-light', $defaults); }
	&-inherit { color: inherit; }

	&-bold { font-weight: bold; }
	&-italic { font-style: italic; }

	@each $name,$size in $font-sizes {
		&-#{$name} { 
			font-size: $size;
			line-height: $size * 1.2;
		}
	}
}

/* ====================================
		HELPERS: FLEX & ALIGNMENT
 * ==================================== */
.flex {
	@include flex();

	&-row { @include flex(row); }
	&-column { @include flex(column); }
	&-wrap { @include flex($wrap: wrap); }
	&-nowrap { @include flex($wrap: nowrap); }
}

.flex-child { flex: 1 0 auto; }

@each $position in $text-positions {
	.text-#{$position} { text-align: unquote($position); }
}

@each $type in $justify {
	.justify-#{$type} { justify-content: unquote($type); }
}

@each $type in $align {
	.align-#{$type} { align-items: unquote($type); }
}

.no-pad { padding: 0 !important; }
.no-margin { margin: 0 !important; }


@each $name,$size in $font-sizes {
	.font-size-#{$name} { font-size: $size; }
	.line-height-#{$name} { line-height: $size * 1.1; }
}

.center { margin: 0 auto; }

.center-contents > * { margin: 0 auto; }

/* ====================================
		HELPERS: PADDING
 * ==================================== */
.row.col-no-pad > .col { padding: 0; }

@each $position in $border-sides {
	.pad-#{$position} {
		padding-#{$position}: $default-pad;
	}
	.no-pad-#{$position} {
		padding-#{$position}: 0 !important;
	}
}

@each $position in $other {
	
		@if $position == 'around' {
			.pad-#{$position} { padding: $default-pad; }
			.no-pad-#{$position} { padding: 0 !important; }
		}
		@if $position == 'x' { 
			.pad-#{$position} {
				padding-left: $default-pad;
				padding-right: $default-pad;
			}

			.no-pad-#{$position} {
				padding-left: 0 !important;
				padding-right: 0 !important;
			}
		}
		@if $position == 'y' {
			.pad-#{$position} {
				padding-top: $default-pad;
				padding-bottom: $default-pad;
			}

			.no-pad-#{$position} {
				padding-top: 0 important;
				padding-bottom: 0 important;
			}
		}
}

@each $size,$pad in $padding-sizes {
	@each $position in $border-sides {
		.pad-#{$size}-#{$position} {
			padding-#{$position}: map-get($padding-sizes, quote($size));
		}
	}

	@each $position in $other {
		.pad-#{$size}-#{$position} {
			@if $position == 'around' { 
				padding: map-get($padding-sizes, quote($size)); 
			}
			@if $position == 'x' { 
				padding-left: map-get($padding-sizes, quote($size));
				padding-right: map-get($padding-sizes, quote($size));
			}
			@if $position == 'y' {
				padding-top: map-get($padding-sizes, quote($size));
				padding-bottom: map-get($padding-sizes, quote($size));
			}
		}
	}
}

/* ====================================
		HELPERS: MARGIN
 * ==================================== */
.row.col-no-margin > .col { margin: 0; }

@each $position in $border-sides {
	.margin-#{$position} {
		margin-#{$position}: $default-margin;
	}
}

@each $position in $other {
	@if $position == 'around' { 
		.margin-#{$position} { margin: $default-margin; }
		.no-margin-#{$position} { margin: 0 !important; }
	}
	@if $position == 'x' { 
		.margin-#{$position} {
			margin-left: $default-margin;
			margin-right: $default-margin;
		}

		.no-margin-#{$position} {
			margin-left: 0 !important;
			margin-right: 0 !important;
		}
	}
	@if $position == 'y' {
		.margin-#{$position} {
			margin-top: $default-margin;
			margin-bottom: $default-margin;
		}

		.no-margin-#{$position} {
			margin-top: 0 !important;
			margin-bottom: 0 !important;
		}
	}
}

@each $size,$margin in $margin-sizes {
	@each $position in $border-sides {
		.margin-#{$size}-#{$position} {
			margin-#{$position}: map-get($margin-sizes, quote($size));
		}
	}
	@each $position in $other {
		.margin-#{$size}-#{$position} {
			@if $position == 'around' { 
				margin: map-get($margin-sizes, quote($size)); 
			}
			@if $position == 'x' { 
				margin-left: map-get($margin-sizes, quote($size));
				margin-right: map-get($margin-sizes, quote($size));
			}
			@if $position == 'y' {
				margin-top: map-get($margin-sizes, quote($size));
				margin-bottom: map-get($margin-sizes, quote($size));
			}
		}
	}
}